/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.55
 * Generated at: 2014-11-19 18:59:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mail.SMTPAuthenticator;
import javax.mail.Transport;
import javax.mail.Message;
import javax.mail.internet.InternetAddress;
import javax.mail.Address;
import javax.mail.internet.MimeMessage;
import javax.mail.Session;
import javax.mail.Authenticator;
import java.util.Properties;
import mail.SMTPAuthenticator;

public final class SendMail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

	// 파라미터 수신
	request.setCharacterEncoding("UTF-8");
	String sender = request.getParameter("sender");
	String receiver = request.getParameter("receiver");
	String subject = request.getParameter("subject");
	String content = request.getParameter("content");
	
	//메일 발송을 위한 정보 설정
	// 정보를 담기 위한 객체  
	Properties p = new Properties();

	// SMTP 서버의 계정 설정  
	// Naver와 연결할 경우 네이버 아이디 지정  
	// Google과 연결할 경우 본인의 Gmail 주소  
	p.put("mail.smtp.user", "hoseo_cmu@naver.com");

	// SMTP 서버 정보 설정  
	// 네이버일 경우 smtp.naver.com  
	// Google일 경우 smtp.gmail.com  
	p.put("mail.smtp.host", "smtp.naver.com");

	// 아래 정보는 네이버와 구글이 동일하므로 수정하지 마세요.  
	p.put("mail.smtp.port", "465");
	p.put("mail.smtp.starttls.enable", "true");
	p.put("mail.smtp.auth", "true");
	p.put("mail.smtp.debug", "true");
	p.put("mail.smtp.socketFactory.port", "465");
	p.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
	p.put("mail.smtp.socketFactory.fallback", "false");

	//발송하기 부분 구현
	try {
		Authenticator auth = new SMTPAuthenticator();
		Session ses = Session.getInstance(p, auth);

		//메일을 전송할 때 상세한 상황을 콘솔에 출력한다.
		ses.setDebug(true);

		//메일의 내용을 담기 위한 객체
		MimeMessage msg = new MimeMessage(ses);

		//제목 설정
		msg.setSubject(subject);

		//보내는 사람의 메일 주소
		Address fromAddr = new InternetAddress(sender);
		msg.setFrom(fromAddr);

		//받는 사람의 메일 주소
		Address toAddr = new InternetAddress(receiver);
		msg.addRecipient(Message.RecipientType.TO, toAddr);

		//메시지 본문의 내용과 형식, 캐릭터 셋 설정
		msg.setContent(content, "text/html;charset=UTF-8");

		//발송하기
		Transport.send(msg);
	} catch (Exception e) {
		e.printStackTrace();
		String script = "<script type='text/javascript'>\n";
		script += "alert('메일발송에 실패했습니다.');\n";
		script += "history.back();\n";
		script += "</script>";
		out.print(script);
		return;
	}

	String script = "<script type='text/javascript'>\n";
	script += "alert('메일발송에 성공했습니다.');\n";
	script += "</script>";
	script += "<meta http-equiv='refresh' content='0; url=MailForm.html'/>";
	out.print(script);

      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
